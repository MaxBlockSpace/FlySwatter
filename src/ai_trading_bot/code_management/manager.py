import logging
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path
from .git_handler import GitHandler
from .code_generator import CodeGenerator
from .safety_validator import SafetyValidator
from .deployment_handler import DeploymentHandler

class CodeManager:
    def __init__(self):
        self.logger = logging.getLogger('ai_trading_bot.code_management')
        self.git = GitHandler()
        self.generator = CodeGenerator()
        self.validator = SafetyValidator()
        self.deployment = DeploymentHandler()
        self.root_dir = Path(__file__).parent.parent.parent.parent

    async def propose_update(
        self,
        insights: Dict[str, Any],
        module_path: str,
        change_type: str
    ) -> Dict[str, Any]:
        try:
            # Generate code changes based on insights
            changes = await self.generator.generate_changes(
                insights,
                module_path,
                change_type
            )

            # Validate changes
            validation = await self.validator.validate_changes(changes)
            if not validation['is_safe']:
                self.logger.warning(f"Unsafe changes detected: {validation['issues']}")
                return {
                    'success': False,
                    'error': 'Safety validation failed',
                    'details': validation['issues']
                }

            # Create branch and commit changes
            branch_name = f"bot-update-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
            await self.git.create_branch(branch_name)
            
            # Apply changes
            for file_path, content in changes['files'].items():
                full_path = self.root_dir / file_path
                full_path.parent.mkdir(parents=True, exist_ok=True)
                full_path.write_text(content)

            # Commit and push
            commit_msg = self._generate_commit_message(changes, insights)
            await self.git.commit_changes(commit_msg)
            await self.git.push_branch(branch_name)

            # Create pull request
            pr_url = await self.git.create_pull_request(
                branch_name,
                commit_msg,
                changes['description']
            )

            return {
                'success': True,
                'pr_url': pr_url,
                'changes': changes
            }

        except Exception as e:
            self.logger.error(f"Failed to propose update: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    async def apply_update(self, pr_url: str) -> Dict[str, Any]:
        try:
            # Verify PR status and reviews
            pr_status = await self.git.get_pr_status(pr_url)
            if not pr_status['approved']:
                return {
                    'success': False,
                    'error': 'PR not approved'
                }

            # Merge PR
            merge_result = await self.git.merge_pr(pr_url)
            if not merge_result['success']:
                return merge_result

            # Deploy changes
            deploy_result = await self.deployment.deploy_changes()
            
            return {
                'success': True,
                'deployment': deploy_result
            }

        except Exception as e:
            self.logger.error(f"Failed to apply update: {e}")
            return {
                'success': False,
                'error': str(e)
            }

    def _generate_commit_message(
        self,
        changes: Dict[str, Any],
        insights: Dict[str, Any]
    ) -> str:
        return f"""
Bot Update: {changes['type']}

{changes['description']}

Insights:
{insights.get('description', 'No description provided')}

Generated by AI Trading Bot
"""